
# -------------------------------------------------------------
# Importaciones principales
# -------------------------------------------------------------
import streamlit as st                                     # Librer√≠a principal para crear la interfaz web interactiva
from styles import inject_css                              # Importa la funci√≥n que aplica el estilo visual (CSS)
from services import load_models, recommend, fetch_poster  # Importa las funciones de l√≥gica: cargar modelos, recomendar y obtener p√≥sters

# -------------------------------------------------------------
# Aplicaci√≥n de estilos personalizados
# -------------------------------------------------------------
inject_css()  # Llama a la funci√≥n definida en styles.py para aplicar el dise√±o visual (colores, fondo, botones, etc.)

# -------------------------------------------------------------
# Carga de modelos (archivos .pkl con los datos y similitudes)
# -------------------------------------------------------------
# Muestra un spinner (animaci√≥n de carga) mientras se leen los archivos pickle
with st.spinner('Cargando la magia del cine... ‚è≥'):
    movies, similarity = load_models()  # Carga el DataFrame de pel√≠culas y la matriz de similitud

# Obtiene la lista de t√≠tulos de pel√≠culas para el men√∫ desplegable
movie_list = movies['title'].values

# -------------------------------------------------------------
# Interfaz principal de la aplicaci√≥n
# -------------------------------------------------------------
# T√≠tulo principal de la app
st.title('Tu Asistente de Pel√≠culas üçø')

# L√≠nea divisora (separador visual)
st.markdown("---")

# Texto introductorio con formato Markdown y emojis
st.markdown("‚ú® **Encuentra tu pr√≥xima joya cinematogr√°fica con un solo clic.**")

# Otra l√≠nea divisora
st.markdown("---")

# Crea un selectbox (lista desplegable) con las pel√≠culas disponibles
selected_movie = st.selectbox("üîé **Selecciona una pel√≠cula que te guste:**", movie_list)

# -------------------------------------------------------------
# Secci√≥n de Recomendaciones
# -------------------------------------------------------------
# Cuando el usuario presiona el bot√≥n ‚ÄúObtener Recomendaciones‚Äù
if st.button('üöÄ Obtener Recomendaciones'):
    # Muestra un spinner mientras se calculan las recomendaciones
    with st.spinner('Buscando en la galaxia del cine... üåå'):
        # Llama a la funci√≥n recommend() pasando la pel√≠cula elegida, el DataFrame y la matriz de similitud
        recommended_movie_names, recommended_movie_posters = recommend(selected_movie, movies, similarity)

    # Separador visual
    st.markdown("---")

    # ---------------------------------------------------------
    # Mostrar la pel√≠cula seleccionada por el usuario
    # ---------------------------------------------------------
    st.subheader(f'Has Seleccionado: {selected_movie} üåü')  # Muestra el t√≠tulo de la pel√≠cula elegida

    # Obtiene el ID de la pel√≠cula seleccionada desde el DataFrame
    selected_movie_id = movies[movies['title'] == selected_movie].iloc[0].movie_id

    # Descarga el p√≥ster de la pel√≠cula usando la funci√≥n fetch_poster()
    selected_poster = fetch_poster(selected_movie_id)

    # Divide el espacio en dos columnas (1 para la imagen, 2 para texto)
    col_img_sel, col_info_sel = st.columns([1, 2])

    # Muestra la imagen del p√≥ster en la primera columna
    with col_img_sel:
        st.image(selected_poster, use_container_width=True)

    # Muestra el texto informativo en la segunda columna
    with col_info_sel:
        st.write("¬°Una excelente elecci√≥n para inspirar tus pr√≥ximas aventuras f√≠lmicas!")
        # Ejemplos de datos adicionales que podr√≠an mostrarse si se agregan m√°s columnas al DataFrame:
        # st.write(f"**G√©neros:** {movies[movies['title'] == selected_movie]['genres'].iloc[0]}")
        # st.write(f"**A√±o:** {movies[movies['title'] == selected_movie]['release_date'].iloc[0][:4]}")

    # Separador visual
    st.markdown("---")

    # ---------------------------------------------------------
    # Mostrar las recomendaciones basadas en la selecci√≥n
    # ---------------------------------------------------------
    st.subheader('‚ú® Pel√≠culas que te Podr√≠an Gustar ‚ú®')  # Subt√≠tulo
    st.write("Aqu√≠ tienes 5 sugerencias basadas en tu selecci√≥n:")  # Descripci√≥n corta

    # Crea una fila con 5 columnas (una por pel√≠cula recomendada)
    cols = st.columns(5)

    # Itera sobre las pel√≠culas recomendadas y las muestra en las columnas
    for i in range(len(recommended_movie_names)):
        col = cols[i % 5]  # Usa el operador m√≥dulo para recorrer las columnas
        with col:
            st.markdown(f'<div class="rec-title">{recommended_movie_names[i]}</div>', unsafe_allow_html=True)
            st.image(recommended_movie_posters[i], use_container_width=True)  # Muestra el p√≥ster

    # Separador final
    st.markdown("---")

    # Mensaje de √©xito final (tipo alerta verde)
    st.success("¬°Esperamos que encuentres tu pr√≥xima pel√≠cula favorita!")

# L√≠nea final para cerrar la estructura visual
st.markdown("---")
